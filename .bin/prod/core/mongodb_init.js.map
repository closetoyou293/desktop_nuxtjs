{"version":3,"sources":["../../../server/core/mongodb_init.js"],"names":["Init","BuildModel","server","bluebird","promisifyAll","mongoose","Promise","res","rej","connect","Config","database","useUnifiedTopology","useCreateIndex","useNewUrlParser","useFindAndModify","bufferCommands","bufferMaxEntries","then","connection","Log","Show","Msg","true","catch","error","Error","false","toString","List","Server","ModelList","Array","isArray","build","model","length","forEach","e","name","path","nameCheck","_","find","o","dupe","push","models"],"mappings":";;;;;QAIgBA,I,GAAAA,I;QAsBAC,U,GAAAA,U;;AA1BhB;;;;AACA;;;;AACA;;;;;;AAEO,SAASD,IAAT,CAAcE,MAAd,EAAqB;AACxBC,uBAASC,YAAT,CAAsBC,kBAAtB;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7BH,2BAASI,OAAT,CAAiBP,OAAOQ,MAAP,CAAcC,QAA/B,EAAyC;AACrCC,gCAAoB,IADiB;AAErCC,4BAAgB,IAFqB;AAGrCC,6BAAiB,IAHoB;AAIrCC,8BAAkB,KAJmB;AAKrCC,4BAAgB,KALqB;AAMrCC,8BAAkB;AANmB,SAAzC,EAQCC,IARD,CAQMC,cAAc;AAChBjB,mBAAOkB,GAAP,CAAWC,IAAX,CAAgBnB,OAAOoB,GAAP,CAAWX,QAAX,CAAoBF,OAApB,CAA4Bc,IAA5C;AACAhB,gBAAI,IAAJ;AACH,SAXD,EAYCiB,KAZD,CAYOC,SAAS;AACZvB,mBAAOkB,GAAP,CAAWM,KAAX,CAAiBxB,OAAOoB,GAAP,CAAWX,QAAX,CAAoBF,OAApB,CAA4BkB,KAA7C;AACAnB,gBAAIiB,MAAMG,QAAN,EAAJ;AACH,SAfD;AAgBH,KAjBM,CAAP;AAkBH;;AAEM,SAAS3B,UAAT,CAAoB4B,IAApB,EAA0BC,MAA1B,EAAiC;AACpC,WAAO,IAAIxB,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,YAAIuB,YAAY,EAAhB;;AAEA,YAAG,CAACF,IAAD,IAASG,MAAMC,OAAN,CAAcJ,IAAd,KAAuB,KAAnC,EAA0C,OAAOrB,IAAIsB,OAAOR,GAAP,CAAWY,KAAX,CAAiBC,KAAjB,CAAuBR,KAA3B,CAAP;AAC1C,YAAGE,KAAKO,MAAL,GAAc,CAAjB,EAAoB,OAAO7B,KAAP;;AAEpBsB,aAAKQ,OAAL,CAAaC,KAAK;AACd,gBAAG,CAACA,EAAEC,IAAH,IAAW,CAACD,EAAEE,IAAjB,EAAuB,OAAOhC,IAAIsB,OAAOR,GAAP,CAAWY,KAAX,CAAiBC,KAAjB,CAAuBR,KAA3B,CAAP;;AAEvB;AACA,gBAAIc,YAAYC,iBAAEC,IAAF,CAAOZ,SAAP,EAAmBa,CAAD,IAAO;AAAE,uBAAOA,KAAKN,EAAEC,IAAd;AAAqB,aAAhD,CAAhB;AACA,gBAAGE,SAAH,EAAc,OAAOjC,IAAIsB,OAAOR,GAAP,CAAWY,KAAX,CAAiBC,KAAjB,CAAuBU,IAA3B,CAAP;AACdd,sBAAUe,IAAV,CAAeR,EAAEC,IAAjB;;AAEA;AACAlC,+BAAS8B,KAAT,CAAeG,EAAEC,IAAjB,EAAuBD,EAAEE,IAAzB;;AAEA;AACA,gBAAGT,UAAUK,MAAV,IAAoBP,KAAKO,MAA5B,EAAmC;AAC/BN,uBAAOV,GAAP,CAAWC,IAAX,CAAgBS,OAAOR,GAAP,CAAWY,KAAX,CAAiBC,KAAjB,CAAuBZ,IAAvC;AACAhB,oBAAIF,mBAAS0C,MAAb;AACH;AACJ,SAhBD;AAiBH,KAvBM,CAAP;AAwBH","file":"mongodb_init.js","sourcesContent":["import _ from 'lodash';\r\nimport mongoose from 'mongoose';\r\nimport bluebird from 'bluebird';\r\n\r\nexport function Init(server){\r\n    bluebird.promisifyAll(mongoose);\r\n    return new Promise((res, rej) => {\r\n        mongoose.connect(server.Config.database, { \r\n            useUnifiedTopology: true,\r\n            useCreateIndex: true,\r\n            useNewUrlParser: true,\r\n            useFindAndModify: false,\r\n            bufferCommands: false,\r\n            bufferMaxEntries: 0\r\n        })\r\n        .then(connection => {\r\n            server.Log.Show(server.Msg.database.connect.true)\r\n            res(true);\r\n        })\r\n        .catch(error => {\r\n            server.Log.Error(server.Msg.database.connect.false)\r\n            rej(error.toString());\r\n        })\r\n    });\r\n}\r\n\r\nexport function BuildModel(List, Server){\r\n    return new Promise((res, rej) => {\r\n        let ModelList = [];\r\n\r\n        if(!List || Array.isArray(List) == false) return rej(Server.Msg.build.model.false);\r\n        if(List.length < 1) return res();\r\n\r\n        List.forEach(e => {\r\n            if(!e.name || !e.path) return rej(Server.Msg.build.model.false);\r\n\r\n            //Check route name\r\n            let nameCheck = _.find(ModelList, (o) => { return o == e.name; });\r\n            if(nameCheck) return rej(Server.Msg.build.model.dupe);\r\n            ModelList.push(e.name);\r\n\r\n            //Set Model\r\n            mongoose.model(e.name, e.path);\r\n\r\n            //Done\r\n            if(ModelList.length == List.length){\r\n                Server.Log.Show(Server.Msg.build.model.true);\r\n                res(mongoose.models);\r\n            }\r\n        });\r\n    });\r\n}"]}